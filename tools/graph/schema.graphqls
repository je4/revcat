# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type KeyValue {
  key: String!
  value: String!
}

type Media {
  name: String!
  mimetype: String!
  pronom: String
  type: String!
  uri: String!
  orientation: Int!
  fulltext: String
  width: Int!
  height: Int!
  length: Int!
}

type MediaList {
  name: String!
  items: [Media!]!
}

type Person {
  name: String!
  role: String
}

type Note {
    title: String
    text: String!
}

type Reference {
    type: String
    title: String
    signature: String!
}

type MultiLangString {
    lang: String!
    value: String!
    translated: Boolean!
}

type MediathekBaseEntry {
    id: ID!
    signature: String!
    signatureOriginal: String!
    source: String!
    title: [MultiLangString!]!
    series: String
    place: String
    date: String
    collectionTitle: String
    person: [Person!]
    catalog: [String!]
    category: [String!]
    tags: [String!]
    url: String
    publisher: String
    rights: String
    license: String
    references: [Reference!]
    type: String
    poster: Media
}

type MediathekFullEntry {
  id: ID!
  base: MediathekBaseEntry!
  notes: [Note!]
  abstract: [MultiLangString!]
  referencesFull: [MediathekBaseEntry!]
  extra: [KeyValue!]
  media: [MediaList!]
}

type FacetValueString {
  strVal: String!
  count: Int!
}

type FacetValueInt {
  intVal: Int!
  count: Int!
}

union FacetValue = FacetValueString | FacetValueInt

type Facet {
    name: String!
    values: [FacetValue!]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  currentCursor: String!
  startCursor: String!
  endCursor: String!
}

type SearchResult {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [MediathekFullEntry!]!
  facets: [Facet!]!
}

input InFilterBoolTerm {
    field: String!
    and: Boolean! = true
    values: [String!]
}

input InFilter {
    boolTerm: InFilterBoolTerm
}

input InFacetTerm {
    field: String!
    name: String!
    minDocCount: Int! = 1
    size: Int! = 10
    include: [String!]
    exclude: [String!]
}

input InFacet {
    term: InFacetTerm
    query: InFilter!
}



type Query {
  search(query: String!, facets: [InFacet!], filter: [InFilter!], vector: [Float!], first: Int, size: Int, cursor: String): SearchResult!
  mediathekEntries(signatures: [String!]!): [MediathekFullEntry!]
}
