// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type RevCatGraphQLClient interface {
	MediathekEntries(ctx context.Context, signatures []string, interceptors ...clientv2.RequestInterceptor) (*MediathekEntries, error)
	VectorSearchShort(ctx context.Context, filter []*InFilter, vector []float64, size int64, interceptors ...clientv2.RequestInterceptor) (*VectorSearchShort, error)
	VectorSearch(ctx context.Context, filter []*InFilter, vector []float64, size int64, interceptors ...clientv2.RequestInterceptor) (*VectorSearch, error)
	Search(ctx context.Context, query string, facets []*InFacet, filter []*InFilter, vector []float64, first *int64, size *int64, cursor *string, interceptors ...clientv2.RequestInterceptor) (*Search, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) RevCatGraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type Query struct {
	Search           SearchResult          "json:\"search\" graphql:\"search\""
	VectorSearch     SearchResult          "json:\"vectorSearch\" graphql:\"vectorSearch\""
	MediathekEntries []*MediathekFullEntry "json:\"mediathekEntries,omitempty\" graphql:\"mediathekEntries\""
}
type MediathekBaseFragment struct {
	Signature  string               "json:\"signature\" graphql:\"signature\""
	Source     string               "json:\"source\" graphql:\"source\""
	Title      []*MultiLangFragment "json:\"title\" graphql:\"title\""
	Person     []*PersonFragment    "json:\"person,omitempty\" graphql:\"person\""
	Series     *string              "json:\"series,omitempty\" graphql:\"series\""
	Place      *string              "json:\"place,omitempty\" graphql:\"place\""
	Date       *string              "json:\"date,omitempty\" graphql:\"date\""
	Category   []string             "json:\"category,omitempty\" graphql:\"category\""
	Tags       []string             "json:\"tags,omitempty\" graphql:\"tags\""
	URL        *string              "json:\"url,omitempty\" graphql:\"url\""
	Publisher  *string              "json:\"publisher,omitempty\" graphql:\"publisher\""
	Rights     *string              "json:\"rights,omitempty\" graphql:\"rights\""
	License    *string              "json:\"license,omitempty\" graphql:\"license\""
	Type       *string              "json:\"type,omitempty\" graphql:\"type\""
	Poster     *MediaItemFragment   "json:\"poster,omitempty\" graphql:\"poster\""
	References []*ReferenceFragment "json:\"references,omitempty\" graphql:\"references\""
}

func (t *MediathekBaseFragment) GetSignature() string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Signature
}
func (t *MediathekBaseFragment) GetSource() string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Source
}
func (t *MediathekBaseFragment) GetTitle() []*MultiLangFragment {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Title
}
func (t *MediathekBaseFragment) GetPerson() []*PersonFragment {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Person
}
func (t *MediathekBaseFragment) GetSeries() *string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Series
}
func (t *MediathekBaseFragment) GetPlace() *string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Place
}
func (t *MediathekBaseFragment) GetDate() *string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Date
}
func (t *MediathekBaseFragment) GetCategory() []string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Category
}
func (t *MediathekBaseFragment) GetTags() []string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Tags
}
func (t *MediathekBaseFragment) GetURL() *string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.URL
}
func (t *MediathekBaseFragment) GetPublisher() *string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Publisher
}
func (t *MediathekBaseFragment) GetRights() *string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Rights
}
func (t *MediathekBaseFragment) GetLicense() *string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.License
}
func (t *MediathekBaseFragment) GetType() *string {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Type
}
func (t *MediathekBaseFragment) GetPoster() *MediaItemFragment {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.Poster
}
func (t *MediathekBaseFragment) GetReferences() []*ReferenceFragment {
	if t == nil {
		t = &MediathekBaseFragment{}
	}
	return t.References
}

type MediathekBaseShortFragment struct {
	Signature string               "json:\"signature\" graphql:\"signature\""
	Source    string               "json:\"source\" graphql:\"source\""
	Title     []*MultiLangFragment "json:\"title\" graphql:\"title\""
	Person    []*PersonFragment    "json:\"person,omitempty\" graphql:\"person\""
	Series    *string              "json:\"series,omitempty\" graphql:\"series\""
	Place     *string              "json:\"place,omitempty\" graphql:\"place\""
	Date      *string              "json:\"date,omitempty\" graphql:\"date\""
	Category  []string             "json:\"category,omitempty\" graphql:\"category\""
	Tags      []string             "json:\"tags,omitempty\" graphql:\"tags\""
	URL       *string              "json:\"url,omitempty\" graphql:\"url\""
	Publisher *string              "json:\"publisher,omitempty\" graphql:\"publisher\""
	Rights    *string              "json:\"rights,omitempty\" graphql:\"rights\""
	License   *string              "json:\"license,omitempty\" graphql:\"license\""
	Type      *string              "json:\"type,omitempty\" graphql:\"type\""
}

func (t *MediathekBaseShortFragment) GetSignature() string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Signature
}
func (t *MediathekBaseShortFragment) GetSource() string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Source
}
func (t *MediathekBaseShortFragment) GetTitle() []*MultiLangFragment {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Title
}
func (t *MediathekBaseShortFragment) GetPerson() []*PersonFragment {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Person
}
func (t *MediathekBaseShortFragment) GetSeries() *string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Series
}
func (t *MediathekBaseShortFragment) GetPlace() *string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Place
}
func (t *MediathekBaseShortFragment) GetDate() *string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Date
}
func (t *MediathekBaseShortFragment) GetCategory() []string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Category
}
func (t *MediathekBaseShortFragment) GetTags() []string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Tags
}
func (t *MediathekBaseShortFragment) GetURL() *string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.URL
}
func (t *MediathekBaseShortFragment) GetPublisher() *string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Publisher
}
func (t *MediathekBaseShortFragment) GetRights() *string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Rights
}
func (t *MediathekBaseShortFragment) GetLicense() *string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.License
}
func (t *MediathekBaseShortFragment) GetType() *string {
	if t == nil {
		t = &MediathekBaseShortFragment{}
	}
	return t.Type
}

type MultiLangFragment struct {
	Lang       string "json:\"lang\" graphql:\"lang\""
	Value      string "json:\"value\" graphql:\"value\""
	Translated bool   "json:\"translated\" graphql:\"translated\""
}

func (t *MultiLangFragment) GetLang() string {
	if t == nil {
		t = &MultiLangFragment{}
	}
	return t.Lang
}
func (t *MultiLangFragment) GetValue() string {
	if t == nil {
		t = &MultiLangFragment{}
	}
	return t.Value
}
func (t *MultiLangFragment) GetTranslated() bool {
	if t == nil {
		t = &MultiLangFragment{}
	}
	return t.Translated
}

type NoteFragment struct {
	Title *string "json:\"title,omitempty\" graphql:\"title\""
	Text  string  "json:\"text\" graphql:\"text\""
}

func (t *NoteFragment) GetTitle() *string {
	if t == nil {
		t = &NoteFragment{}
	}
	return t.Title
}
func (t *NoteFragment) GetText() string {
	if t == nil {
		t = &NoteFragment{}
	}
	return t.Text
}

type ReferenceFragment struct {
	Type      *string "json:\"type,omitempty\" graphql:\"type\""
	Title     *string "json:\"title,omitempty\" graphql:\"title\""
	Signature string  "json:\"signature\" graphql:\"signature\""
}

func (t *ReferenceFragment) GetType() *string {
	if t == nil {
		t = &ReferenceFragment{}
	}
	return t.Type
}
func (t *ReferenceFragment) GetTitle() *string {
	if t == nil {
		t = &ReferenceFragment{}
	}
	return t.Title
}
func (t *ReferenceFragment) GetSignature() string {
	if t == nil {
		t = &ReferenceFragment{}
	}
	return t.Signature
}

type MediaItemFragment struct {
	Name        string  "json:\"name\" graphql:\"name\""
	Mimetype    string  "json:\"mimetype\" graphql:\"mimetype\""
	Pronom      *string "json:\"pronom,omitempty\" graphql:\"pronom\""
	Type        string  "json:\"type\" graphql:\"type\""
	URI         string  "json:\"uri\" graphql:\"uri\""
	Orientation int64   "json:\"orientation\" graphql:\"orientation\""
	Width       int64   "json:\"width\" graphql:\"width\""
	Height      int64   "json:\"height\" graphql:\"height\""
}

func (t *MediaItemFragment) GetName() string {
	if t == nil {
		t = &MediaItemFragment{}
	}
	return t.Name
}
func (t *MediaItemFragment) GetMimetype() string {
	if t == nil {
		t = &MediaItemFragment{}
	}
	return t.Mimetype
}
func (t *MediaItemFragment) GetPronom() *string {
	if t == nil {
		t = &MediaItemFragment{}
	}
	return t.Pronom
}
func (t *MediaItemFragment) GetType() string {
	if t == nil {
		t = &MediaItemFragment{}
	}
	return t.Type
}
func (t *MediaItemFragment) GetURI() string {
	if t == nil {
		t = &MediaItemFragment{}
	}
	return t.URI
}
func (t *MediaItemFragment) GetOrientation() int64 {
	if t == nil {
		t = &MediaItemFragment{}
	}
	return t.Orientation
}
func (t *MediaItemFragment) GetWidth() int64 {
	if t == nil {
		t = &MediaItemFragment{}
	}
	return t.Width
}
func (t *MediaItemFragment) GetHeight() int64 {
	if t == nil {
		t = &MediaItemFragment{}
	}
	return t.Height
}

type MediaListFragment struct {
	Name  string               "json:\"name\" graphql:\"name\""
	Items []*MediaItemFragment "json:\"items\" graphql:\"items\""
}

func (t *MediaListFragment) GetName() string {
	if t == nil {
		t = &MediaListFragment{}
	}
	return t.Name
}
func (t *MediaListFragment) GetItems() []*MediaItemFragment {
	if t == nil {
		t = &MediaListFragment{}
	}
	return t.Items
}

type KeyValueFragment struct {
	Key   string "json:\"key\" graphql:\"key\""
	Value string "json:\"value\" graphql:\"value\""
}

func (t *KeyValueFragment) GetKey() string {
	if t == nil {
		t = &KeyValueFragment{}
	}
	return t.Key
}
func (t *KeyValueFragment) GetValue() string {
	if t == nil {
		t = &KeyValueFragment{}
	}
	return t.Value
}

type PageInfoFragment struct {
	HasNextPage     bool   "json:\"hasNextPage\" graphql:\"hasNextPage\""
	HasPreviousPage bool   "json:\"hasPreviousPage\" graphql:\"hasPreviousPage\""
	CurrentCursor   string "json:\"currentCursor\" graphql:\"currentCursor\""
	StartCursor     string "json:\"startCursor\" graphql:\"startCursor\""
	EndCursor       string "json:\"endCursor\" graphql:\"endCursor\""
}

func (t *PageInfoFragment) GetHasNextPage() bool {
	if t == nil {
		t = &PageInfoFragment{}
	}
	return t.HasNextPage
}
func (t *PageInfoFragment) GetHasPreviousPage() bool {
	if t == nil {
		t = &PageInfoFragment{}
	}
	return t.HasPreviousPage
}
func (t *PageInfoFragment) GetCurrentCursor() string {
	if t == nil {
		t = &PageInfoFragment{}
	}
	return t.CurrentCursor
}
func (t *PageInfoFragment) GetStartCursor() string {
	if t == nil {
		t = &PageInfoFragment{}
	}
	return t.StartCursor
}
func (t *PageInfoFragment) GetEndCursor() string {
	if t == nil {
		t = &PageInfoFragment{}
	}
	return t.EndCursor
}

type FacetValueStringFragment struct {
	StrVal string "json:\"strVal\" graphql:\"strVal\""
	Count  int64  "json:\"count\" graphql:\"count\""
}

func (t *FacetValueStringFragment) GetStrVal() string {
	if t == nil {
		t = &FacetValueStringFragment{}
	}
	return t.StrVal
}
func (t *FacetValueStringFragment) GetCount() int64 {
	if t == nil {
		t = &FacetValueStringFragment{}
	}
	return t.Count
}

type FacetValueIntFragment struct {
	IntVal int64 "json:\"intVal\" graphql:\"intVal\""
	Count  int64 "json:\"count\" graphql:\"count\""
}

func (t *FacetValueIntFragment) GetIntVal() int64 {
	if t == nil {
		t = &FacetValueIntFragment{}
	}
	return t.IntVal
}
func (t *FacetValueIntFragment) GetCount() int64 {
	if t == nil {
		t = &FacetValueIntFragment{}
	}
	return t.Count
}

type FacetValueFragment struct {
	FacetValueString FacetValueStringFragment "graphql:\"... on FacetValueString\""
	FacetValueInt    FacetValueIntFragment    "graphql:\"... on FacetValueInt\""
}

func (t *FacetValueFragment) GetFacetValueString() *FacetValueStringFragment {
	if t == nil {
		t = &FacetValueFragment{}
	}
	return &t.FacetValueString
}
func (t *FacetValueFragment) GetFacetValueInt() *FacetValueIntFragment {
	if t == nil {
		t = &FacetValueFragment{}
	}
	return &t.FacetValueInt
}

type FacetFragment struct {
	Name   string                "json:\"name\" graphql:\"name\""
	Values []*FacetValueFragment "json:\"values,omitempty\" graphql:\"values\""
}

func (t *FacetFragment) GetName() string {
	if t == nil {
		t = &FacetFragment{}
	}
	return t.Name
}
func (t *FacetFragment) GetValues() []*FacetValueFragment {
	if t == nil {
		t = &FacetFragment{}
	}
	return t.Values
}

type PersonFragment struct {
	Name string  "json:\"name\" graphql:\"name\""
	Role *string "json:\"role,omitempty\" graphql:\"role\""
}

func (t *PersonFragment) GetName() string {
	if t == nil {
		t = &PersonFragment{}
	}
	return t.Name
}
func (t *PersonFragment) GetRole() *string {
	if t == nil {
		t = &PersonFragment{}
	}
	return t.Role
}

type MediathekEntries_MediathekEntries struct {
	ID             string                   "json:\"id\" graphql:\"id\""
	Base           *MediathekBaseFragment   "json:\"base\" graphql:\"base\""
	Notes          []*NoteFragment          "json:\"notes,omitempty\" graphql:\"notes\""
	Abstract       []*MultiLangFragment     "json:\"abstract,omitempty\" graphql:\"abstract\""
	Extra          []*KeyValueFragment      "json:\"extra,omitempty\" graphql:\"extra\""
	Media          []*MediaListFragment     "json:\"media,omitempty\" graphql:\"media\""
	ReferencesFull []*MediathekBaseFragment "json:\"referencesFull,omitempty\" graphql:\"referencesFull\""
	Typename       *string                  "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *MediathekEntries_MediathekEntries) GetID() string {
	if t == nil {
		t = &MediathekEntries_MediathekEntries{}
	}
	return t.ID
}
func (t *MediathekEntries_MediathekEntries) GetBase() *MediathekBaseFragment {
	if t == nil {
		t = &MediathekEntries_MediathekEntries{}
	}
	return t.Base
}
func (t *MediathekEntries_MediathekEntries) GetNotes() []*NoteFragment {
	if t == nil {
		t = &MediathekEntries_MediathekEntries{}
	}
	return t.Notes
}
func (t *MediathekEntries_MediathekEntries) GetAbstract() []*MultiLangFragment {
	if t == nil {
		t = &MediathekEntries_MediathekEntries{}
	}
	return t.Abstract
}
func (t *MediathekEntries_MediathekEntries) GetExtra() []*KeyValueFragment {
	if t == nil {
		t = &MediathekEntries_MediathekEntries{}
	}
	return t.Extra
}
func (t *MediathekEntries_MediathekEntries) GetMedia() []*MediaListFragment {
	if t == nil {
		t = &MediathekEntries_MediathekEntries{}
	}
	return t.Media
}
func (t *MediathekEntries_MediathekEntries) GetReferencesFull() []*MediathekBaseFragment {
	if t == nil {
		t = &MediathekEntries_MediathekEntries{}
	}
	return t.ReferencesFull
}
func (t *MediathekEntries_MediathekEntries) GetTypename() *string {
	if t == nil {
		t = &MediathekEntries_MediathekEntries{}
	}
	return t.Typename
}

type VectorSearchShort_VectorSearch_Edges struct {
	ID       string                      "json:\"id\" graphql:\"id\""
	Base     *MediathekBaseShortFragment "json:\"base\" graphql:\"base\""
	Abstract []*MultiLangFragment        "json:\"abstract,omitempty\" graphql:\"abstract\""
	Typename *string                     "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *VectorSearchShort_VectorSearch_Edges) GetID() string {
	if t == nil {
		t = &VectorSearchShort_VectorSearch_Edges{}
	}
	return t.ID
}
func (t *VectorSearchShort_VectorSearch_Edges) GetBase() *MediathekBaseShortFragment {
	if t == nil {
		t = &VectorSearchShort_VectorSearch_Edges{}
	}
	return t.Base
}
func (t *VectorSearchShort_VectorSearch_Edges) GetAbstract() []*MultiLangFragment {
	if t == nil {
		t = &VectorSearchShort_VectorSearch_Edges{}
	}
	return t.Abstract
}
func (t *VectorSearchShort_VectorSearch_Edges) GetTypename() *string {
	if t == nil {
		t = &VectorSearchShort_VectorSearch_Edges{}
	}
	return t.Typename
}

type VectorSearchShort_VectorSearch struct {
	TotalCount int64                                   "json:\"totalCount\" graphql:\"totalCount\""
	Edges      []*VectorSearchShort_VectorSearch_Edges "json:\"edges\" graphql:\"edges\""
	Facets     []*FacetFragment                        "json:\"facets\" graphql:\"facets\""
	Typename   *string                                 "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *VectorSearchShort_VectorSearch) GetTotalCount() int64 {
	if t == nil {
		t = &VectorSearchShort_VectorSearch{}
	}
	return t.TotalCount
}
func (t *VectorSearchShort_VectorSearch) GetEdges() []*VectorSearchShort_VectorSearch_Edges {
	if t == nil {
		t = &VectorSearchShort_VectorSearch{}
	}
	return t.Edges
}
func (t *VectorSearchShort_VectorSearch) GetFacets() []*FacetFragment {
	if t == nil {
		t = &VectorSearchShort_VectorSearch{}
	}
	return t.Facets
}
func (t *VectorSearchShort_VectorSearch) GetTypename() *string {
	if t == nil {
		t = &VectorSearchShort_VectorSearch{}
	}
	return t.Typename
}

type VectorSearch_VectorSearch_Edges struct {
	ID             string                   "json:\"id\" graphql:\"id\""
	Base           *MediathekBaseFragment   "json:\"base\" graphql:\"base\""
	Notes          []*NoteFragment          "json:\"notes,omitempty\" graphql:\"notes\""
	Abstract       []*MultiLangFragment     "json:\"abstract,omitempty\" graphql:\"abstract\""
	Extra          []*KeyValueFragment      "json:\"extra,omitempty\" graphql:\"extra\""
	Media          []*MediaListFragment     "json:\"media,omitempty\" graphql:\"media\""
	ReferencesFull []*MediathekBaseFragment "json:\"referencesFull,omitempty\" graphql:\"referencesFull\""
	Typename       *string                  "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *VectorSearch_VectorSearch_Edges) GetID() string {
	if t == nil {
		t = &VectorSearch_VectorSearch_Edges{}
	}
	return t.ID
}
func (t *VectorSearch_VectorSearch_Edges) GetBase() *MediathekBaseFragment {
	if t == nil {
		t = &VectorSearch_VectorSearch_Edges{}
	}
	return t.Base
}
func (t *VectorSearch_VectorSearch_Edges) GetNotes() []*NoteFragment {
	if t == nil {
		t = &VectorSearch_VectorSearch_Edges{}
	}
	return t.Notes
}
func (t *VectorSearch_VectorSearch_Edges) GetAbstract() []*MultiLangFragment {
	if t == nil {
		t = &VectorSearch_VectorSearch_Edges{}
	}
	return t.Abstract
}
func (t *VectorSearch_VectorSearch_Edges) GetExtra() []*KeyValueFragment {
	if t == nil {
		t = &VectorSearch_VectorSearch_Edges{}
	}
	return t.Extra
}
func (t *VectorSearch_VectorSearch_Edges) GetMedia() []*MediaListFragment {
	if t == nil {
		t = &VectorSearch_VectorSearch_Edges{}
	}
	return t.Media
}
func (t *VectorSearch_VectorSearch_Edges) GetReferencesFull() []*MediathekBaseFragment {
	if t == nil {
		t = &VectorSearch_VectorSearch_Edges{}
	}
	return t.ReferencesFull
}
func (t *VectorSearch_VectorSearch_Edges) GetTypename() *string {
	if t == nil {
		t = &VectorSearch_VectorSearch_Edges{}
	}
	return t.Typename
}

type VectorSearch_VectorSearch struct {
	TotalCount int64                              "json:\"totalCount\" graphql:\"totalCount\""
	Edges      []*VectorSearch_VectorSearch_Edges "json:\"edges\" graphql:\"edges\""
	Facets     []*FacetFragment                   "json:\"facets\" graphql:\"facets\""
	Typename   *string                            "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *VectorSearch_VectorSearch) GetTotalCount() int64 {
	if t == nil {
		t = &VectorSearch_VectorSearch{}
	}
	return t.TotalCount
}
func (t *VectorSearch_VectorSearch) GetEdges() []*VectorSearch_VectorSearch_Edges {
	if t == nil {
		t = &VectorSearch_VectorSearch{}
	}
	return t.Edges
}
func (t *VectorSearch_VectorSearch) GetFacets() []*FacetFragment {
	if t == nil {
		t = &VectorSearch_VectorSearch{}
	}
	return t.Facets
}
func (t *VectorSearch_VectorSearch) GetTypename() *string {
	if t == nil {
		t = &VectorSearch_VectorSearch{}
	}
	return t.Typename
}

type Search_Search_Edges struct {
	ID             string                   "json:\"id\" graphql:\"id\""
	Base           *MediathekBaseFragment   "json:\"base\" graphql:\"base\""
	Notes          []*NoteFragment          "json:\"notes,omitempty\" graphql:\"notes\""
	Abstract       []*MultiLangFragment     "json:\"abstract,omitempty\" graphql:\"abstract\""
	Extra          []*KeyValueFragment      "json:\"extra,omitempty\" graphql:\"extra\""
	Media          []*MediaListFragment     "json:\"media,omitempty\" graphql:\"media\""
	ReferencesFull []*MediathekBaseFragment "json:\"referencesFull,omitempty\" graphql:\"referencesFull\""
	Typename       *string                  "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *Search_Search_Edges) GetID() string {
	if t == nil {
		t = &Search_Search_Edges{}
	}
	return t.ID
}
func (t *Search_Search_Edges) GetBase() *MediathekBaseFragment {
	if t == nil {
		t = &Search_Search_Edges{}
	}
	return t.Base
}
func (t *Search_Search_Edges) GetNotes() []*NoteFragment {
	if t == nil {
		t = &Search_Search_Edges{}
	}
	return t.Notes
}
func (t *Search_Search_Edges) GetAbstract() []*MultiLangFragment {
	if t == nil {
		t = &Search_Search_Edges{}
	}
	return t.Abstract
}
func (t *Search_Search_Edges) GetExtra() []*KeyValueFragment {
	if t == nil {
		t = &Search_Search_Edges{}
	}
	return t.Extra
}
func (t *Search_Search_Edges) GetMedia() []*MediaListFragment {
	if t == nil {
		t = &Search_Search_Edges{}
	}
	return t.Media
}
func (t *Search_Search_Edges) GetReferencesFull() []*MediathekBaseFragment {
	if t == nil {
		t = &Search_Search_Edges{}
	}
	return t.ReferencesFull
}
func (t *Search_Search_Edges) GetTypename() *string {
	if t == nil {
		t = &Search_Search_Edges{}
	}
	return t.Typename
}

type Search_Search struct {
	TotalCount int64                  "json:\"totalCount\" graphql:\"totalCount\""
	PageInfo   *PageInfoFragment      "json:\"pageInfo\" graphql:\"pageInfo\""
	Edges      []*Search_Search_Edges "json:\"edges\" graphql:\"edges\""
	Facets     []*FacetFragment       "json:\"facets\" graphql:\"facets\""
	Typename   *string                "json:\"__typename,omitempty\" graphql:\"__typename\""
}

func (t *Search_Search) GetTotalCount() int64 {
	if t == nil {
		t = &Search_Search{}
	}
	return t.TotalCount
}
func (t *Search_Search) GetPageInfo() *PageInfoFragment {
	if t == nil {
		t = &Search_Search{}
	}
	return t.PageInfo
}
func (t *Search_Search) GetEdges() []*Search_Search_Edges {
	if t == nil {
		t = &Search_Search{}
	}
	return t.Edges
}
func (t *Search_Search) GetFacets() []*FacetFragment {
	if t == nil {
		t = &Search_Search{}
	}
	return t.Facets
}
func (t *Search_Search) GetTypename() *string {
	if t == nil {
		t = &Search_Search{}
	}
	return t.Typename
}

type MediathekEntries struct {
	MediathekEntries []*MediathekEntries_MediathekEntries "json:\"mediathekEntries,omitempty\" graphql:\"mediathekEntries\""
}

func (t *MediathekEntries) GetMediathekEntries() []*MediathekEntries_MediathekEntries {
	if t == nil {
		t = &MediathekEntries{}
	}
	return t.MediathekEntries
}

type VectorSearchShort struct {
	VectorSearch VectorSearchShort_VectorSearch "json:\"vectorSearch\" graphql:\"vectorSearch\""
}

func (t *VectorSearchShort) GetVectorSearch() *VectorSearchShort_VectorSearch {
	if t == nil {
		t = &VectorSearchShort{}
	}
	return &t.VectorSearch
}

type VectorSearch struct {
	VectorSearch VectorSearch_VectorSearch "json:\"vectorSearch\" graphql:\"vectorSearch\""
}

func (t *VectorSearch) GetVectorSearch() *VectorSearch_VectorSearch {
	if t == nil {
		t = &VectorSearch{}
	}
	return &t.VectorSearch
}

type Search struct {
	Search Search_Search "json:\"search\" graphql:\"search\""
}

func (t *Search) GetSearch() *Search_Search {
	if t == nil {
		t = &Search{}
	}
	return &t.Search
}

const MediathekEntriesDocument = `query MediathekEntries ($signatures: [String!]!) {
	mediathekEntries(signatures: $signatures) {
		id
		base {
			... MediathekBaseFragment
		}
		notes {
			... NoteFragment
		}
		abstract {
			... MultiLangFragment
		}
		extra {
			... KeyValueFragment
		}
		media {
			... MediaListFragment
		}
		referencesFull {
			... MediathekBaseFragment
		}
		__typename
	}
}
fragment MediathekBaseFragment on MediathekBaseEntry {
	signature
	source
	title {
		... MultiLangFragment
	}
	person {
		... PersonFragment
	}
	series
	place
	date
	category
	tags
	url
	publisher
	rights
	license
	type
	poster {
		... MediaItemFragment
	}
	references {
		... ReferenceFragment
	}
}
fragment MultiLangFragment on MultiLangString {
	lang
	value
	translated
}
fragment PersonFragment on Person {
	name
	role
}
fragment MediaItemFragment on Media {
	name
	mimetype
	pronom
	type
	uri
	orientation
	width
	height
}
fragment ReferenceFragment on Reference {
	type
	title
	signature
}
fragment NoteFragment on Note {
	title
	text
}
fragment KeyValueFragment on KeyValue {
	key
	value
}
fragment MediaListFragment on MediaList {
	name
	items {
		... MediaItemFragment
	}
}
`

func (c *Client) MediathekEntries(ctx context.Context, signatures []string, interceptors ...clientv2.RequestInterceptor) (*MediathekEntries, error) {
	vars := map[string]interface{}{
		"signatures": signatures,
	}

	var res MediathekEntries
	if err := c.Client.Post(ctx, "MediathekEntries", MediathekEntriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const VectorSearchShortDocument = `query vectorSearchShort ($filter: [InFilter!], $vector: [Float!]!, $size: Int!) {
	vectorSearch(filter: $filter, vector: $vector, size: $size) {
		totalCount
		edges {
			id
			base {
				... MediathekBaseShortFragment
			}
			abstract {
				... MultiLangFragment
			}
			__typename
		}
		facets {
			... FacetFragment
		}
		__typename
	}
}
fragment MediathekBaseShortFragment on MediathekBaseEntry {
	signature
	source
	title {
		... MultiLangFragment
	}
	person {
		... PersonFragment
	}
	series
	place
	date
	category
	tags
	url
	publisher
	rights
	license
	type
}
fragment MultiLangFragment on MultiLangString {
	lang
	value
	translated
}
fragment PersonFragment on Person {
	name
	role
}
fragment FacetFragment on Facet {
	name
	values {
		... FacetValueFragment
	}
}
fragment FacetValueFragment on FacetValue {
	... on FacetValueString {
		... FacetValueStringFragment
	}
	... on FacetValueInt {
		... FacetValueIntFragment
	}
}
fragment FacetValueStringFragment on FacetValueString {
	strVal
	count
}
fragment FacetValueIntFragment on FacetValueInt {
	intVal
	count
}
`

func (c *Client) VectorSearchShort(ctx context.Context, filter []*InFilter, vector []float64, size int64, interceptors ...clientv2.RequestInterceptor) (*VectorSearchShort, error) {
	vars := map[string]interface{}{
		"filter": filter,
		"vector": vector,
		"size":   size,
	}

	var res VectorSearchShort
	if err := c.Client.Post(ctx, "vectorSearchShort", VectorSearchShortDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const VectorSearchDocument = `query vectorSearch ($filter: [InFilter!], $vector: [Float!]!, $size: Int!) {
	vectorSearch(filter: $filter, vector: $vector, size: $size) {
		totalCount
		edges {
			id
			base {
				... MediathekBaseFragment
			}
			notes {
				... NoteFragment
			}
			abstract {
				... MultiLangFragment
			}
			extra {
				... KeyValueFragment
			}
			media {
				... MediaListFragment
			}
			referencesFull {
				... MediathekBaseFragment
			}
			__typename
		}
		facets {
			... FacetFragment
		}
		__typename
	}
}
fragment MediathekBaseFragment on MediathekBaseEntry {
	signature
	source
	title {
		... MultiLangFragment
	}
	person {
		... PersonFragment
	}
	series
	place
	date
	category
	tags
	url
	publisher
	rights
	license
	type
	poster {
		... MediaItemFragment
	}
	references {
		... ReferenceFragment
	}
}
fragment MultiLangFragment on MultiLangString {
	lang
	value
	translated
}
fragment PersonFragment on Person {
	name
	role
}
fragment MediaItemFragment on Media {
	name
	mimetype
	pronom
	type
	uri
	orientation
	width
	height
}
fragment ReferenceFragment on Reference {
	type
	title
	signature
}
fragment NoteFragment on Note {
	title
	text
}
fragment KeyValueFragment on KeyValue {
	key
	value
}
fragment MediaListFragment on MediaList {
	name
	items {
		... MediaItemFragment
	}
}
fragment FacetFragment on Facet {
	name
	values {
		... FacetValueFragment
	}
}
fragment FacetValueFragment on FacetValue {
	... on FacetValueString {
		... FacetValueStringFragment
	}
	... on FacetValueInt {
		... FacetValueIntFragment
	}
}
fragment FacetValueStringFragment on FacetValueString {
	strVal
	count
}
fragment FacetValueIntFragment on FacetValueInt {
	intVal
	count
}
`

func (c *Client) VectorSearch(ctx context.Context, filter []*InFilter, vector []float64, size int64, interceptors ...clientv2.RequestInterceptor) (*VectorSearch, error) {
	vars := map[string]interface{}{
		"filter": filter,
		"vector": vector,
		"size":   size,
	}

	var res VectorSearch
	if err := c.Client.Post(ctx, "vectorSearch", VectorSearchDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const SearchDocument = `query search ($query: String!, $facets: [InFacet!], $filter: [InFilter!], $vector: [Float!], $first: Int, $size: Int, $cursor: String) {
	search(query: $query, facets: $facets, filter: $filter, vector: $vector, first: $first, size: $size, cursor: $cursor) {
		totalCount
		pageInfo {
			... PageInfoFragment
		}
		edges {
			id
			base {
				... MediathekBaseFragment
			}
			notes {
				... NoteFragment
			}
			abstract {
				... MultiLangFragment
			}
			extra {
				... KeyValueFragment
			}
			media {
				... MediaListFragment
			}
			referencesFull {
				... MediathekBaseFragment
			}
			__typename
		}
		facets {
			... FacetFragment
		}
		__typename
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
	currentCursor
	startCursor
	endCursor
}
fragment MediathekBaseFragment on MediathekBaseEntry {
	signature
	source
	title {
		... MultiLangFragment
	}
	person {
		... PersonFragment
	}
	series
	place
	date
	category
	tags
	url
	publisher
	rights
	license
	type
	poster {
		... MediaItemFragment
	}
	references {
		... ReferenceFragment
	}
}
fragment MultiLangFragment on MultiLangString {
	lang
	value
	translated
}
fragment PersonFragment on Person {
	name
	role
}
fragment MediaItemFragment on Media {
	name
	mimetype
	pronom
	type
	uri
	orientation
	width
	height
}
fragment ReferenceFragment on Reference {
	type
	title
	signature
}
fragment NoteFragment on Note {
	title
	text
}
fragment KeyValueFragment on KeyValue {
	key
	value
}
fragment MediaListFragment on MediaList {
	name
	items {
		... MediaItemFragment
	}
}
fragment FacetFragment on Facet {
	name
	values {
		... FacetValueFragment
	}
}
fragment FacetValueFragment on FacetValue {
	... on FacetValueString {
		... FacetValueStringFragment
	}
	... on FacetValueInt {
		... FacetValueIntFragment
	}
}
fragment FacetValueStringFragment on FacetValueString {
	strVal
	count
}
fragment FacetValueIntFragment on FacetValueInt {
	intVal
	count
}
`

func (c *Client) Search(ctx context.Context, query string, facets []*InFacet, filter []*InFilter, vector []float64, first *int64, size *int64, cursor *string, interceptors ...clientv2.RequestInterceptor) (*Search, error) {
	vars := map[string]interface{}{
		"query":  query,
		"facets": facets,
		"filter": filter,
		"vector": vector,
		"first":  first,
		"size":   size,
		"cursor": cursor,
	}

	var res Search
	if err := c.Client.Post(ctx, "search", SearchDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	MediathekEntriesDocument:  "MediathekEntries",
	VectorSearchShortDocument: "vectorSearchShort",
	VectorSearchDocument:      "vectorSearch",
	SearchDocument:            "search",
}
